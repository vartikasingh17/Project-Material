import React, { useState, useEffect } from "react";
import axios from "axios";

const Transactions = () => {
  const [transactions, setTransactions] = useState([]);
  const [view, setView] = useState("single"); // "single" or "multiple"
  const [filter, setFilter] = useState("all"); // all|success|failed|pending (lowercase)
  const [loading, setLoading] = useState(true);
  const [error, setError] = useState(null);
  const [currentIndex, setCurrentIndex] = useState(0);

  // fetch data (use relative URL if you use proxy; otherwise use full URL)
  useEffect(() => {
    let mounted = true;
    (async () => {
      try {
        const res = await axios.get("/api/transactions"); // <-- adapt to your server (or use http://localhost:8080/...)
        if (!mounted) return;
        setTransactions(Array.isArray(res.data) ? res.data : []);
      } catch (err) {
        console.error("Fetch error:", err);
        if (mounted)
          setError(
            "Failed to load transactions. Check console/network (CORS or backend URL)."
          );
      } finally {
        if (mounted) setLoading(false);
      }
    })();
    return () => {
      mounted = false;
    };
  }, []);

  // safe filter (guard tx.status)
  const filteredTransactions = transactions.filter((tx) => {
    if (filter === "all") return true;
    return !!tx.status && String(tx.status).toLowerCase() === filter;
  });

  // keep currentIndex valid when filteredTransactions changes
  useEffect(() => {
    if (filteredTransactions.length === 0) {
      setCurrentIndex(0);
    } else if (currentIndex > filteredTransactions.length - 1) {
      setCurrentIndex(0);
    }
    // we only need to run this when length changes
  }, [filteredTransactions.length, currentIndex]);

  const currentTransaction =
    filteredTransactions.length > 0 ? filteredTransactions[currentIndex] : null;

  // helpers for safe HTML printing
  const escapeHtml = (v) => {
    if (v == null) return "";
    return String(v)
      .replace(/&/g, "&amp;")
      .replace(/</g, "&lt;")
      .replace(/>/g, "&gt;");
  };

  const renderTransactionHTML = (tx) => {
    const html = `<!doctype html>
<html>
<head>
<meta charset="utf-8">
<title>Transaction ${escapeHtml(tx?.transactionId)}</title>
<style>
  body{font-family: "Segoe UI", Arial, sans-serif; padding:20px; color:#222}
  .wrapper{max-width:820px;margin:0 auto}
  .header{color:#004080;text-align:center;margin-bottom:16px}
  .card{border:1px solid #ddd;border-radius:10px;padding:22px;box-shadow:0 2px 6px rgba(0,0,0,0.06)}
  .grid{display:grid;grid-template-columns:1fr 1fr;gap:12px;font-size:14px}
  p{margin:6px 0}
  b{color:#000}
</style>
</head>
<body>
  <div class="wrapper">
    <div class="header"><h2>Transaction Preview</h2></div>
    <div class="card">
      <div class="grid">
        <p><b>Transaction ID:</b> ${escapeHtml(tx?.transactionId)}</p>
        <p><b>Reference No:</b> ${escapeHtml(tx?.referenceNo)}</p>
        <p><b>Company:</b> ${escapeHtml(tx?.companyName)}</p>
        <p><b>Beneficiary:</b> ${escapeHtml(tx?.beneficiary)}</p>
        <p><b>Amount:</b> ${escapeHtml(tx?.amount)}</p>
        <p><b>Status:</b> ${escapeHtml(tx?.status)}</p>
        <p><b>Payment Method:</b> ${escapeHtml(tx?.paymentMethod)}</p>
        <p><b>Payee Bank:</b> ${escapeHtml(tx?.payeeBank)}</p>
        <p><b>Date:</b> ${escapeHtml(tx?.valueDate)}</p>
      </div>
    </div>
  </div>
</body>
</html>`;
    return html;
  };

  // Print: open a minimal printable window with only the current transaction
  const handlePrint = () => {
    if (!currentTransaction) {
      alert("No transaction selected to print.");
      return;
    }
    const html = renderTransactionHTML(currentTransaction);
    const printWin = window.open("", "_blank", "noopener");
    if (!printWin) {
      alert("Popup blocked â€” allow popups to print.");
      return;
    }
    printWin.document.open();
    printWin.document.write(html);
    printWin.document.close();
    printWin.focus();
    // call print once content loads
    setTimeout(() => {
      printWin.print();
      // don't forcibly close printing window (browsers may block)
      // printWin.close();
    }, 250);
  };

  // Download: JSON file (easy & reliable). The Print button can be used to Save as PDF.
  const handleDownload = () => {
    if (!currentTransaction) {
      alert("No transaction selected to download.");
      return;
    }
    const blob = new Blob([JSON.stringify(currentTransaction, null, 2)], {
      type: "application/json",
    });
    const url = URL.createObjectURL(blob);
    const a = document.createElement("a");
    a.href = url;
    a.download = transaction_${currentTransaction.transactionId || "0"}.json;
    document.body.appendChild(a);
    a.click();
    a.remove();
    URL.revokeObjectURL(url);
  };

  if (loading) return <h3 style={{ textAlign: "center" }}>Loading transactions...</h3>;
  if (error)
    return (
      <h3 style={{ textAlign: "center", color: "red" }}>
        {error}
      </h3>
    );

  return (
    <div style={{ padding: "30px", fontFamily: "Segoe UI, Arial, sans-serif" }}>
      {/* Header */}
      <div style={{ display: "flex", justifyContent: "space-between", alignItems: "center", marginBottom: 20 }}>
        <h2 style={{ color: "#004080", margin: 0 }}>Transaction Preview</h2>
        <div>
          <button style={{ padding: "8px 16px", marginRight: 10, border: "1px solid #ccc", borderRadius: 6, cursor: "pointer", background: "#f2f2f2" }}>
            Back
          </button>
          <button onClick={handlePrint} style={{ padding: "8px 16px", marginRight: 10, border: "1px solid #ccc", borderRadius: 6, cursor: "pointer", background: "#f2f2f2" }}>
            Print
          </button>
          <button onClick={handleDownload} style={{ padding: "8px 16px", border: "1px solid green", borderRadius: 6, cursor: "pointer", background: "green", color: "#fff" }}>
            Download
          </button>
        </div>
      </div>

      {/* Toggle + filter */}
      <div style={{ display: "flex", alignItems: "center", gap: 10, marginBottom: 20 }}>
        <button onClick={() => setView("single")} style={{ padding: "10px 20px", background: view === "single" ? "#0072cc" : "#fff", color: view === "single" ? "#fff" : "#000", border: "1px solid #0072cc", borderRadius: 6, cursor: "pointer" }}>
          Single Transaction
        </button>
        <button onClick={() => setView("multiple")} style={{ padding: "10px 20px", background: view === "multiple" ? "#0072cc" : "#fff", color: view === "multiple" ? "#fff" : "#000", border: "1px solid #0072cc", borderRadius: 6, cursor: "pointer" }}>
          Multiple Transactions
        </button>

        <select value={filter} onChange={(e) => setFilter(e.target.value)} style={{ marginLeft: "auto", padding: 10, borderRadius: 6, border: "1px solid #ccc" }}>
          <option value="all">All</option>
          <option value="success">Success</option>
          <option value="failed">Failed</option>
          <option value="pending">Pending</option>
        </select>
      </div>

      {/* Content */}
      {filteredTransactions.length === 0 ? (
        <h4 style={{ textAlign: "center", color: "gray" }}>No transactions found for filter: {filter}</h4>
      ) : view === "single" ? (
        <div style={{ border: "1px solid #ccc", borderRadius: 10, padding: 20, margin: "0 auto", maxWidth: 750, background: "#fff", boxShadow: "0 2px 6px rgba(0,0,0,0.1)", position: "relative" }}>
          <div style={{ display: "grid", gridTemplateColumns: "1fr 1fr", gap: 15, fontSize: 14 }}>
            <p><b>Transaction ID:</b> {currentTransaction?.transactionId}</p>
            <p><b>Reference No:</b> {currentTransaction?.referenceNo}</p>
            <p><b>Company:</b> {currentTransaction?.companyName}</p>
            <p><b>Beneficiary:</b> {currentTransaction?.beneficiary}</p>
            <p><b>Amount:</b> ${currentTransaction?.amount}</p>
            <p><b>Status:</b> {currentTransaction?.status}</p>
            <p><b>Payment Method:</b> {currentTransaction?.paymentMethod}</p>
            <p><b>Payee Bank:</b> {currentTransaction?.payeeBank}</p>
            <p><b>Date:</b> {currentTransaction?.valueDate}</p>
          </div>

          {/* Prev / Next */}
          <div style={{ textAlign: "right", marginTop: 18 }}>
            <button onClick={() => setCurrentIndex((p) => Math.max(p - 1, 0))} disabled={currentIndex === 0} style={{ padding: "8px 16px", marginRight: 10, border: "1px solid #ccc", borderRadius: 6, background: "#f2f2f2", cursor: currentIndex === 0 ? "not-allowed" : "pointer" }}>
              Previous
            </button>
            <button onClick={() => setCurrentIndex((p) => Math.min(p + 1, filteredTransactions.length - 1))} disabled={currentIndex === filteredTransactions.length - 1} style={{ padding: "8px 16px", border: "1px solid #ccc", borderRadius: 6, background: "#f2f2f2", cursor: currentIndex === filteredTransactions.length - 1 ? "not-allowed" : "pointer" }}>
              Next
            </button>
          </div>
        </div>
      ) : (
        <div>
          {filteredTransactions.map((tx, idx) => (
            <div key={tx.transactionId || idx} style={{ border: "1px solid #ccc", borderRadius: 10, padding: 15, marginBottom: 15, background: "#f9f9f9", boxShadow: "0 2px 4px rgba(0,0,0,0.08)" }}>
              <h4 style={{ color: "#004080", marginBottom: 8 }}>Transaction ID: {tx.transactionId}</h4>
              <p><b>Reference No:</b> {tx.referenceNo}</p>
              <p><b>Company:</b> {tx.companyName}</p>
              <p><b>Beneficiary:</b> {tx.beneficiary}</p>
              <p><b>Amount:</b> ${tx.amount}</p>
              <p><b>Status:</b> {tx.status}</p>
              <p><b>Payment Method:</b> {tx.paymentMethod}</p>
              <p><b>Payee Bank:</b> {tx.payeeBank}</p>
              <p><b>Date:</b> {tx.valueDate}</p>
            </div>
          ))}
        </div>
      )}
    </div>
  );
};

export default Transactions;
